/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fastcourierservice.gui;

import command.interfaces.ICommand;
import command.interfaces.ICommandBehaviour;
import commandtracker.Command;
import datamodel.Delivery;
import datamodel.DeliveryStatus;
import fastcourierservice.commands.UpdateStatusCommand;
import java.awt.Dialog;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Brian
 */
public class UpdateStatus extends javax.swing.JDialog {

    private Delivery editDelivery;
    private DefaultComboBoxModel<DeliveryStatus> model;
    private Boolean delivered;
    private FastCourierServiceGUI parentsParent;

    /**
     * Creates new form UpdateStatus
     */
    public UpdateStatus(java.awt.Dialog parent, FastCourierServiceGUI parentsParent,
            String title, Dialog.ModalityType modalityType) {
        super(parent, title, modalityType);
        initComponents();
        setLocationRelativeTo(null);
        setBounds(getX(), getY(), 400, 410);
        this.parentsParent = parentsParent;
        delivered = false;
        pnlCalendar.setVisible(false);
        lblSetDeliveredDate.setVisible(false);
        calDeliveredDate.getDayChooser().addPropertyChangeListener("day", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent e) {
                setDeliveredDate();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainWindow = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblDeliveryConsNo = new javax.swing.JLabel();
        lblSetStatus = new javax.swing.JLabel();
        lblSetDeliveredDate = new javax.swing.JLabel();
        pnlSetStatus = new javax.swing.JPanel();
        scrNotes = new javax.swing.JScrollPane();
        notesDisplay = new javax.swing.JTextArea();
        lblNotes = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        cbxStatus = new javax.swing.JComboBox();
        pnlCalendar = new javax.swing.JPanel();
        calDeliveredDate = new com.toedter.calendar.JCalendar();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlMainWindow.setBackground(new java.awt.Color(199, 208, 213));

        lblHeading.setFont(new java.awt.Font("Garamond", 1, 30)); // NOI18N
        lblHeading.setForeground(new java.awt.Color(255, 90, 9));
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("Update Delivery Status");

        lblDeliveryConsNo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDeliveryConsNo.setForeground(new java.awt.Color(236, 88, 58));
        lblDeliveryConsNo.setText("ConsNo");

        lblSetStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSetStatus.setForeground(new java.awt.Color(236, 88, 58));
        lblSetStatus.setText("Set Status:");

        lblSetDeliveredDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSetDeliveredDate.setForeground(new java.awt.Color(236, 88, 58));
        lblSetDeliveredDate.setText("Set Delivered Date:");

        pnlSetStatus.setBackground(new java.awt.Color(147, 177, 198));

        notesDisplay.setBackground(new java.awt.Color(255, 242, 231));
        notesDisplay.setColumns(20);
        notesDisplay.setRows(5);
        scrNotes.setViewportView(notesDisplay);

        lblNotes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNotes.setForeground(new java.awt.Color(255, 255, 255));
        lblNotes.setText("Notes:");

        lblStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 255, 255));
        lblStatus.setText("Status:");

        cbxStatus.setBackground(new java.awt.Color(255, 90, 9));
        cbxStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxStatus.setForeground(new java.awt.Color(255, 90, 9));
        cbxStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout pnlSetStatusLayout = new javax.swing.GroupLayout(pnlSetStatus);
        pnlSetStatus.setLayout(pnlSetStatusLayout);
        pnlSetStatusLayout.setHorizontalGroup(
            pnlSetStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSetStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSetStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblStatus)
                    .addComponent(lblNotes, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(pnlSetStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrNotes))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlSetStatusLayout.setVerticalGroup(
            pnlSetStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSetStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSetStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSetStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrNotes)
                    .addGroup(pnlSetStatusLayout.createSequentialGroup()
                        .addComponent(lblNotes)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnlCalendar.setBackground(new java.awt.Color(147, 177, 198));

        javax.swing.GroupLayout pnlCalendarLayout = new javax.swing.GroupLayout(pnlCalendar);
        pnlCalendar.setLayout(pnlCalendarLayout);
        pnlCalendarLayout.setHorizontalGroup(
            pnlCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCalendarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(calDeliveredDate, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlCalendarLayout.setVerticalGroup(
            pnlCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCalendarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calDeliveredDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSave.setBackground(new java.awt.Color(255, 113, 72));
        btnSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(255, 113, 72));
        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainWindowLayout = new javax.swing.GroupLayout(pnlMainWindow);
        pnlMainWindow.setLayout(pnlMainWindowLayout);
        pnlMainWindowLayout.setHorizontalGroup(
            pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainWindowLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainWindowLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDeliveryConsNo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlMainWindowLayout.createSequentialGroup()
                                .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pnlSetStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(pnlMainWindowLayout.createSequentialGroup()
                                            .addComponent(btnCancel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnSave))
                                        .addGroup(pnlMainWindowLayout.createSequentialGroup()
                                            .addComponent(lblSetStatus)
                                            .addGap(171, 171, 171))))
                                .addGap(28, 28, 28)
                                .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSetDeliveredDate)
                                    .addComponent(pnlCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMainWindowLayout.setVerticalGroup(
            pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainWindowLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lblHeading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDeliveryConsNo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSetStatus)
                    .addComponent(lblSetDeliveredDate))
                .addGap(11, 11, 11)
                .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlCalendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSetStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (this.delivered == true) {
            setAsDelivered();
        } else {
            saveNewDetails();
            this.setSize(256, this.getHeight());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UpdateStatus dialog = new UpdateStatus(new javax.swing.JDialog(),
                        new FastCourierServiceGUI(), "", Dialog.ModalityType.APPLICATION_MODAL);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private com.toedter.calendar.JCalendar calDeliveredDate;
    private javax.swing.JComboBox cbxStatus;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblDeliveryConsNo;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblSetDeliveredDate;
    private javax.swing.JLabel lblSetStatus;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextArea notesDisplay;
    private javax.swing.JPanel pnlCalendar;
    private javax.swing.JPanel pnlMainWindow;
    private javax.swing.JPanel pnlSetStatus;
    private javax.swing.JScrollPane scrNotes;
    // End of variables declaration//GEN-END:variables

    private void setDeliveredDate() {
        if (calDeliveredDate.getDate().after(new Date())) {
            JOptionPane.showMessageDialog(this,
                    "The delivered date cannot be in the future",
                    "Incorrect date.", JOptionPane.ERROR_MESSAGE);
            calDeliveredDate.setDate(new Date());
        }
    }

    private void setAsDelivered() {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to set this delivery as Delivered for the date: "
                + df.format(calDeliveredDate.getDate()),
                "Warning", dialogButton);

        if (dialogResult == JOptionPane.YES_OPTION) {
            String notes = "";
            if (notesDisplay.getText().trim().length() != 0) {
                notes = notesDisplay.getText();
            }
            ICommandBehaviour objEdit = new UpdateStatusCommand(editDelivery,
                    notes, calDeliveredDate.getDate(),
                    DeliveryStatus.DELIVERED);
            ICommand objCommand = new Command(objEdit);
            this.parentsParent.executeCommand(objCommand);
            this.parentsParent.checkUndoRedo();

            this.dispose();
        }
    }

    public void setDelivered(Boolean setDelivered) {
        delivered = setDelivered;
        model = new DefaultComboBoxModel<>();
        model.addElement(DeliveryStatus.DELIVERED);
        cbxStatus.setModel(model);
        cbxStatus.setEditable(false);
        pnlCalendar.setVisible(true);
        lblSetDeliveredDate.setVisible(true);
        setBounds(getX(), getY(), 750, 470);
    }

    public void setDelivery(Delivery delivery) {
        editDelivery = delivery;
        lblDeliveryConsNo.setText(editDelivery.toString());
        rebuildComboBox();
    }

    private void saveNewDetails() {
        DeliveryStatus temp = model.getElementAt(cbxStatus.getSelectedIndex());
        if (temp == DeliveryStatus.DELIVERYREFUSED
                || temp == DeliveryStatus.UNDELIVERABLE) {
            if (notesDisplay.getText().trim().length() == 0) {
                JOptionPane.showMessageDialog(this,
                        "A note must be entered when that delivery status is set.",
                        "Enter a note.", JOptionPane.ERROR_MESSAGE);
            } else {
                saveHelper(temp);
            }
        } else {
            saveHelper(temp);
        }
    }

    private void saveHelper(DeliveryStatus temp) {
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to save these details?",
                "Warning", dialogButton);
        
        if (dialogResult == JOptionPane.YES_OPTION) {
            String notes = "";
            if (notesDisplay.getText().trim().length() != 0) {
                notes = notesDisplay.getText();
            }
            ICommandBehaviour objEdit = new UpdateStatusCommand(editDelivery,
                    notes, null, temp);
            ICommand objCommand = new Command(objEdit);
            this.parentsParent.executeCommand(objCommand);
            this.parentsParent.checkUndoRedo();
            this.dispose();
        }
    }

    private void rebuildComboBox() {
        model = new DefaultComboBoxModel<>();
        model.addElement(DeliveryStatus.DELIVERYREFUSED);
        model.addElement(DeliveryStatus.INTRANSIT);
        model.addElement(DeliveryStatus.PENDINGCOLLECTION);
        model.addElement(DeliveryStatus.UNDELIVERABLE);

        cbxStatus.setModel(model);
        for (int i = 0; i < model.getSize(); i++) {
            if (model.getElementAt(i).equals(editDelivery.getStatus())) {
                cbxStatus.setSelectedIndex(i);
            }
        }
    }
}
