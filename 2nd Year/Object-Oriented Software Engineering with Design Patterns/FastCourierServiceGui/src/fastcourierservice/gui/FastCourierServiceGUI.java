/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fastcourierservice.gui;

import command.interfaces.ICommand;
import command.interfaces.ICommandTracker;
import commandtracker.CommandTracker;
import datamodel.Customer;
import datamodel.CustomerList;
import datamodel.DeliveryStatus;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import observerpattern.IObserver;


/**
 *
 * @author Brian
 */
public class FastCourierServiceGUI extends javax.swing.JFrame implements IObserver, ICommandTracker {

    private CustomerList customers;
    private DeliveryReport allReport;
    private DeliveryReport wipReport;
    private DeliveryReport completeReport;
    private ICommandTracker objCmdTracker = new CommandTracker();

    /**
     * Creates new form FastCourierServiceGUI
     */
    public FastCourierServiceGUI() {
        customers = new CustomerList();
        customers.registerObserver(this);

        initComponents();
        setLocationRelativeTo(null);
        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent ev) {
                onExit();
            }
        });

        this.setCustomers(customers);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainWindow = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        pnlCustomerDeliveries = new javax.swing.JPanel();
        lblNoCompleteDel = new javax.swing.JLabel();
        txtNoCompleteDeliveries = new javax.swing.JLabel();
        lblNoIncompleteDeliveries = new javax.swing.JLabel();
        btnIncompleteDeliveries = new javax.swing.JButton();
        txtNoIncompleteDeliveries = new javax.swing.JLabel();
        btnCompleteDeliveries = new javax.swing.JButton();
        lblCustomerDeliveries = new javax.swing.JLabel();
        pnlCustomers = new javax.swing.JPanel();
        cbxCustomers = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        custDisplay = new javax.swing.JTextArea();
        btnEditCustomer = new javax.swing.JButton();
        btnAddNewCustomer = new javax.swing.JButton();
        btnAddNewDelivery = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        lblCustomers = new javax.swing.JLabel();
        txtUndoRedoConfirm = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        mnbMainMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuLoad = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuUndo = new javax.swing.JMenuItem();
        mnuRedo = new javax.swing.JMenuItem();
        mnuOpenAllReports = new javax.swing.JMenu();
        mnuAllReport = new javax.swing.JMenuItem();
        mnuCompletedReport = new javax.swing.JMenuItem();
        mnuWIPReport = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuOpen3Report = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlMainWindow.setBackground(new java.awt.Color(199, 208, 213));

        lblHeading.setFont(new java.awt.Font("Showcard Gothic", 1, 40)); // NOI18N
        lblHeading.setForeground(new java.awt.Color(255, 90, 9));
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("Fast Courier Service");

        pnlCustomerDeliveries.setBackground(new java.awt.Color(147, 177, 198));
        pnlCustomerDeliveries.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblNoCompleteDel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNoCompleteDel.setForeground(new java.awt.Color(255, 255, 255));
        lblNoCompleteDel.setText("<html>No. of <b>Complete</b> Deliveries:</html>");

        txtNoCompleteDeliveries.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtNoCompleteDeliveries.setForeground(new java.awt.Color(255, 255, 255));
        txtNoCompleteDeliveries.setText("0");

        lblNoIncompleteDeliveries.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNoIncompleteDeliveries.setForeground(new java.awt.Color(255, 255, 255));
        lblNoIncompleteDeliveries.setText("<html>No. of <b>Incomplete</b> Deliveries:</html>");

        btnIncompleteDeliveries.setBackground(new java.awt.Color(255, 113, 72));
        btnIncompleteDeliveries.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnIncompleteDeliveries.setForeground(new java.awt.Color(255, 255, 255));
        btnIncompleteDeliveries.setText("<html>View <b>Incomplete</b> Deliveries</html>");
        btnIncompleteDeliveries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncompleteDeliveriesActionPerformed(evt);
            }
        });

        txtNoIncompleteDeliveries.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtNoIncompleteDeliveries.setForeground(new java.awt.Color(255, 255, 255));
        txtNoIncompleteDeliveries.setText("0");

        btnCompleteDeliveries.setBackground(new java.awt.Color(255, 113, 72));
        btnCompleteDeliveries.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCompleteDeliveries.setForeground(new java.awt.Color(255, 255, 255));
        btnCompleteDeliveries.setText("<html>View <b>Complete</b> Deliveries</html>");
        btnCompleteDeliveries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteDeliveriesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCustomerDeliveriesLayout = new javax.swing.GroupLayout(pnlCustomerDeliveries);
        pnlCustomerDeliveries.setLayout(pnlCustomerDeliveriesLayout);
        pnlCustomerDeliveriesLayout.setHorizontalGroup(
            pnlCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerDeliveriesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNoCompleteDel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNoIncompleteDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNoIncompleteDeliveries)
                    .addComponent(txtNoCompleteDeliveries))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnIncompleteDeliveries, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCompleteDeliveries, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlCustomerDeliveriesLayout.setVerticalGroup(
            pnlCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerDeliveriesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoCompleteDel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNoCompleteDeliveries)
                    .addComponent(btnCompleteDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoIncompleteDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNoIncompleteDeliveries)
                    .addComponent(btnIncompleteDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblCustomerDeliveries.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        lblCustomerDeliveries.setForeground(new java.awt.Color(236, 88, 58));
        lblCustomerDeliveries.setText("Customer Deliveries:");

        pnlCustomers.setBackground(new java.awt.Color(147, 177, 198));
        pnlCustomers.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbxCustomers.setBackground(new java.awt.Color(255, 90, 9));
        cbxCustomers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxCustomers.setForeground(new java.awt.Color(255, 90, 9));
        cbxCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCustomersActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        custDisplay.setEditable(false);
        custDisplay.setBackground(new java.awt.Color(147, 177, 198));
        custDisplay.setColumns(20);
        custDisplay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        custDisplay.setForeground(new java.awt.Color(255, 255, 255));
        custDisplay.setRows(5);
        custDisplay.setBorder(null);
        jScrollPane1.setViewportView(custDisplay);

        btnEditCustomer.setBackground(new java.awt.Color(255, 113, 72));
        btnEditCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditCustomer.setForeground(new java.awt.Color(255, 255, 255));
        btnEditCustomer.setText("Edit Customer Details");
        btnEditCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCustomerActionPerformed(evt);
            }
        });

        btnAddNewCustomer.setBackground(new java.awt.Color(255, 113, 72));
        btnAddNewCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddNewCustomer.setForeground(new java.awt.Color(255, 255, 255));
        btnAddNewCustomer.setText("Add New Customer");
        btnAddNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewCustomerActionPerformed(evt);
            }
        });

        btnAddNewDelivery.setBackground(new java.awt.Color(255, 113, 72));
        btnAddNewDelivery.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddNewDelivery.setForeground(new java.awt.Color(255, 255, 255));
        btnAddNewDelivery.setText("Add New Delivery");
        btnAddNewDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewDeliveryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCustomersLayout = new javax.swing.GroupLayout(pnlCustomers);
        pnlCustomers.setLayout(pnlCustomersLayout);
        pnlCustomersLayout.setHorizontalGroup(
            pnlCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxCustomers, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddNewDelivery, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddNewCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlCustomersLayout.setVerticalGroup(
            pnlCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomersLayout.createSequentialGroup()
                .addGroup(pnlCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomersLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbxCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCustomersLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(btnAddNewCustomer)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditCustomer)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddNewDelivery)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator2.setBackground(new java.awt.Color(255, 153, 0));

        lblCustomers.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        lblCustomers.setForeground(new java.awt.Color(236, 88, 58));
        lblCustomers.setText("Customers:");

        txtUndoRedoConfirm.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtUndoRedoConfirm.setForeground(new java.awt.Color(255, 0, 0));

        btnExit.setBackground(new java.awt.Color(255, 113, 72));
        btnExit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainWindowLayout = new javax.swing.GroupLayout(pnlMainWindow);
        pnlMainWindow.setLayout(pnlMainWindowLayout);
        pnlMainWindowLayout.setHorizontalGroup(
            pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(pnlMainWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCustomerDeliveries, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlCustomers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMainWindowLayout.createSequentialGroup()
                        .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCustomers)
                            .addComponent(lblCustomerDeliveries))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlMainWindowLayout.createSequentialGroup()
                        .addComponent(txtUndoRedoConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(btnExit)))
                .addContainerGap())
        );
        pnlMainWindowLayout.setVerticalGroup(
            pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(lblCustomers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblCustomerDeliveries)
                .addGap(8, 8, 8)
                .addComponent(pnlCustomerDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUndoRedoConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainWindowLayout.createSequentialGroup()
                        .addComponent(btnExit)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        mnbMainMenuBar.setForeground(new java.awt.Color(236, 88, 58));

        jMenu1.setForeground(new java.awt.Color(236, 88, 58));
        jMenu1.setText("File");

        mnuLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuLoad.setForeground(new java.awt.Color(236, 88, 58));
        mnuLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/folder_open.png"))); // NOI18N
        mnuLoad.setText("Load Data");
        mnuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadActionPerformed(evt);
            }
        });
        jMenu1.add(mnuLoad);

        mnuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSave.setForeground(new java.awt.Color(236, 88, 58));
        mnuSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/save.png"))); // NOI18N
        mnuSave.setText("Save Data");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSave);
        jMenu1.add(jSeparator1);

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnuExit.setForeground(new java.awt.Color(236, 88, 58));
        mnuExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/Exit.gif"))); // NOI18N
        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExit);

        mnbMainMenuBar.add(jMenu1);

        jMenu2.setForeground(new java.awt.Color(236, 88, 58));
        jMenu2.setText("Edit");

        mnuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnuUndo.setForeground(new java.awt.Color(236, 88, 58));
        mnuUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/undo.png"))); // NOI18N
        mnuUndo.setText("Undo");
        mnuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuUndoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuUndo);

        mnuRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        mnuRedo.setForeground(new java.awt.Color(236, 88, 58));
        mnuRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/redo.png"))); // NOI18N
        mnuRedo.setText("Redo");
        mnuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRedoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuRedo);

        mnbMainMenuBar.add(jMenu2);

        mnuOpenAllReports.setForeground(new java.awt.Color(236, 88, 58));
        mnuOpenAllReports.setText("Reports");

        mnuAllReport.setForeground(new java.awt.Color(236, 88, 58));
        mnuAllReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/report_check.png"))); // NOI18N
        mnuAllReport.setText("View All Deliveries Report");
        mnuAllReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAllReportActionPerformed(evt);
            }
        });
        mnuOpenAllReports.add(mnuAllReport);

        mnuCompletedReport.setForeground(new java.awt.Color(236, 88, 58));
        mnuCompletedReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/report_check.png"))); // NOI18N
        mnuCompletedReport.setText("View Completed Deliveries Report");
        mnuCompletedReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCompletedReportActionPerformed(evt);
            }
        });
        mnuOpenAllReports.add(mnuCompletedReport);

        mnuWIPReport.setForeground(new java.awt.Color(236, 88, 58));
        mnuWIPReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/report_check.png"))); // NOI18N
        mnuWIPReport.setText("View Work In Progress Report");
        mnuWIPReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuWIPReportActionPerformed(evt);
            }
        });
        mnuOpenAllReports.add(mnuWIPReport);
        mnuOpenAllReports.add(jSeparator3);

        mnuOpen3Report.setForeground(new java.awt.Color(236, 88, 58));
        mnuOpen3Report.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fastcourierservice/gui/multi_report.png"))); // NOI18N
        mnuOpen3Report.setText("Open All Reports");
        mnuOpen3Report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpen3ReportActionPerformed(evt);
            }
        });
        mnuOpenAllReports.add(mnuOpen3Report);

        mnbMainMenuBar.add(mnuOpenAllReports);

        setJMenuBar(mnbMainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        onExit();
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        saveCustomerData();
    }//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadActionPerformed
        loadCustomerData();
    }//GEN-LAST:event_mnuLoadActionPerformed

    private void btnEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCustomerActionPerformed
        AddEditCustomer objWindow = new AddEditCustomer(this, true, AddEditCustomerType.EDIT);
        objWindow.setCustomerList(customers);
        objWindow.setEditableCustomer(cbxCustomers.getSelectedIndex());
        objWindow.setVisible(true);
    }//GEN-LAST:event_btnEditCustomerActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        onExit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void cbxCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCustomersActionPerformed
        showCustomerDetails();
    }//GEN-LAST:event_cbxCustomersActionPerformed

    private void btnAddNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewCustomerActionPerformed
        AddEditCustomer objWindow = new AddEditCustomer(this, true, AddEditCustomerType.ADD);
        objWindow.setCustomerList(customers);
        objWindow.setVisible(true);
    }//GEN-LAST:event_btnAddNewCustomerActionPerformed

    private void btnCompleteDeliveriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteDeliveriesActionPerformed
        createDeliveriesWindow(CustomerDeliveriesType.COMPLETED);
    }//GEN-LAST:event_btnCompleteDeliveriesActionPerformed

    private void btnAddNewDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewDeliveryActionPerformed
        AddNewDelivery objWindow = new AddNewDelivery(this, true);
        objWindow.setCustomerList(customers);
        objWindow.setEditableCustomer(cbxCustomers.getSelectedIndex());
        objWindow.setVisible(true);
    }//GEN-LAST:event_btnAddNewDeliveryActionPerformed

    private void btnIncompleteDeliveriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncompleteDeliveriesActionPerformed
        createDeliveriesWindow(CustomerDeliveriesType.INCOMPLETE);
    }//GEN-LAST:event_btnIncompleteDeliveriesActionPerformed

    private void mnuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuUndoActionPerformed
        String confirm = this.objCmdTracker.undoLastCommand();
        checkUndoRedo();
        txtUndoRedoConfirm.setText(confirm);
    }//GEN-LAST:event_mnuUndoActionPerformed

    private void mnuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRedoActionPerformed
        String confirm = this.objCmdTracker.redoLastCommand();
        checkUndoRedo();
        txtUndoRedoConfirm.setText(confirm);
    }//GEN-LAST:event_mnuRedoActionPerformed

    private void mnuWIPReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuWIPReportActionPerformed
        openWIPReport();
    }//GEN-LAST:event_mnuWIPReportActionPerformed

    private void mnuCompletedReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCompletedReportActionPerformed
        openCompletedReport();
    }//GEN-LAST:event_mnuCompletedReportActionPerformed

    private void mnuAllReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAllReportActionPerformed
        openAllReport();
    }//GEN-LAST:event_mnuAllReportActionPerformed

    private void mnuOpen3ReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpen3ReportActionPerformed
    openWIPReport(); 
    openCompletedReport();
    openAllReport();
    }//GEN-LAST:event_mnuOpen3ReportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FastCourierServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FastCourierServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FastCourierServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FastCourierServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FastCourierServiceGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewCustomer;
    private javax.swing.JButton btnAddNewDelivery;
    private javax.swing.JButton btnCompleteDeliveries;
    private javax.swing.JButton btnEditCustomer;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnIncompleteDeliveries;
    private javax.swing.JComboBox cbxCustomers;
    private javax.swing.JTextArea custDisplay;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel lblCustomerDeliveries;
    private javax.swing.JLabel lblCustomers;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblNoCompleteDel;
    private javax.swing.JLabel lblNoIncompleteDeliveries;
    private javax.swing.JMenuBar mnbMainMenuBar;
    private javax.swing.JMenuItem mnuAllReport;
    private javax.swing.JMenuItem mnuCompletedReport;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuLoad;
    private javax.swing.JMenuItem mnuOpen3Report;
    private javax.swing.JMenu mnuOpenAllReports;
    private javax.swing.JMenuItem mnuRedo;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenuItem mnuUndo;
    private javax.swing.JMenuItem mnuWIPReport;
    private javax.swing.JPanel pnlCustomerDeliveries;
    private javax.swing.JPanel pnlCustomers;
    private javax.swing.JPanel pnlMainWindow;
    private javax.swing.JLabel txtNoCompleteDeliveries;
    private javax.swing.JLabel txtNoIncompleteDeliveries;
    private javax.swing.JLabel txtUndoRedoConfirm;
    // End of variables declaration//GEN-END:variables

    public void checkUndoRedo() {
        if (this.objCmdTracker.isRedoable()) {
            this.mnuRedo.setEnabled(true);
        } else {
            this.mnuRedo.setEnabled(false);
        }
        if (this.objCmdTracker.isUndoable()) {
            this.mnuUndo.setEnabled(true);
        } else {
            this.mnuUndo.setEnabled(false);
        }
    }
    
    private void openWIPReport() {
        if (wipReport == null) {
            wipReport = createReportWindow(DeliveryReportType.WORKINPROGRESS);
        } else {
            wipReport.setVisible(true);
        }
    }
    
    private void openCompletedReport() {
        if (completeReport == null) {
            completeReport = createReportWindow(DeliveryReportType.COMPLETED);
        } else {
            completeReport.setVisible(true);
        }
    }
    
    private void openAllReport() {
        if (allReport == null) {
            allReport = createReportWindow(DeliveryReportType.AllDELIVERIES);
        } else {
            allReport.setVisible(true);
        }
    }

    private DeliveryReport createReportWindow(DeliveryReportType type) {
        DeliveryReport report;
        report = new DeliveryReport(type, this);
        report.setCustomers(customers);
        report.setVisible(true);
        return report;
    }

    private void createDeliveriesWindow(CustomerDeliveriesType type) {
        Customer tempCustomer = this.customers.getCustomerAt(
                cbxCustomers.getSelectedIndex());

        ArrayList<DeliveryStatus> delStatusList = new ArrayList<>();
        Boolean custHasDeliveries = false;
        switch (type) {
            case COMPLETED:
                delStatusList.add(DeliveryStatus.DELIVERED);
                delStatusList.add(DeliveryStatus.UNDELIVERABLE);
                for (DeliveryStatus status : delStatusList) {
                    if (tempCustomer.getDeliveriesByStatus(status).size() > 0) {
                        CustomerDeliveries objWindow = new CustomerDeliveries(this, true, type);
                        objWindow.setCustomers(customers);
                        objWindow.setEditableCustomer(cbxCustomers.getSelectedIndex());
                        objWindow.setVisible(true);
                        custHasDeliveries = true;
                        break;
                    }
                }
                if (!custHasDeliveries) {
                    JOptionPane.showMessageDialog(this,
                            tempCustomer.getFullName()
                            + " has no completed deliveries.",
                            "No completed deliveries on record",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                break;
            case INCOMPLETE:
                delStatusList.add(DeliveryStatus.INTRANSIT);
                delStatusList.add(DeliveryStatus.DELIVERYREFUSED);
                delStatusList.add(DeliveryStatus.PENDINGCOLLECTION);
                for (DeliveryStatus status : delStatusList) {
                    if (tempCustomer.getDeliveriesByStatus(status).size() > 0) {
                        CustomerDeliveries objWindow = new CustomerDeliveries(this, true, type);
                        objWindow.setCustomers(customers);
                        objWindow.setEditableCustomer(cbxCustomers.getSelectedIndex());
                        objWindow.setVisible(true);
                        custHasDeliveries = true;
                        break;
                    }
                }
                if (!custHasDeliveries) {
                    JOptionPane.showMessageDialog(this,
                            tempCustomer.getFullName()
                            + " has no incomplete deliveries.",
                            "No incomplete deliveries on record",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                break;
        }
    }

    private void saveCustomerData() {
        JFileChooser objFileDialogue = new JFileChooser();
        int intDialogResult = JFileChooser.CANCEL_OPTION;
        intDialogResult = objFileDialogue.showSaveDialog(this);

        if (intDialogResult == JFileChooser.APPROVE_OPTION) {

            File objFile = objFileDialogue.getSelectedFile();

            try (ObjectOutputStream objOut = new ObjectOutputStream(
                    new BufferedOutputStream(
                    new FileOutputStream(objFile)))) {
                objOut.writeObject(customers);
                JOptionPane.showMessageDialog(this,
                        "Data Saved.",
                        "Save completed", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(FastCourierServiceGUI.class
                        .getName()).log(
                        Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        this,
                        "Error saving data model.",
                        "File save error: " + ex.getMessage(),
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Save operation cancelled",
                    "Operation aborted", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadCustomerData() {
        JFileChooser objFileDialogue = new JFileChooser();
        int intDialogResult = JFileChooser.CANCEL_OPTION;
        intDialogResult = objFileDialogue.showOpenDialog(this);
        if (intDialogResult == JFileChooser.APPROVE_OPTION) {
            File objFile = objFileDialogue.getSelectedFile();

            if (objFile.exists() && objFile.canRead()) {
                try (ObjectInputStream objIn = new ObjectInputStream(
                        new BufferedInputStream(
                        new FileInputStream(objFile)))) {
                    Object objData = objIn.readObject();
                    CustomerList objNewCustomerList = (CustomerList) objData;
                    if (objNewCustomerList != null) {
                        ArrayList<IObserver> objCustomersObservers = customers.getObservers();
                        for (IObserver currObserver : objCustomersObservers) {
                            this.customers.removeObserver(currObserver);
                        }

                        for (IObserver currObserver : objCustomersObservers) {
                            objNewCustomerList.registerObserver(currObserver);
                        }
                        this.customers = objNewCustomerList;
                        this.customers.notifyObservers();
                        update();
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "No stock data found",
                                "Error reading file", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (ClassNotFoundException | IOException | ClassCastException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Data file could not be read",
                            "Operation aborted", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "File not found / unreadable",
                        "Error accessing file", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "File load cancelled",
                    "Operation aborted", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void onExit() {
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to exit? Any unsaved entries will be lost!",
                "Warning", dialogButton);

        if (dialogResult == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    @Override
    public void update() {
        if (null != this.customers) {
            rebuildComboBox();
        }
    }

    private void calculateNoDeliveries() {
        int complete = 0;
        int incomplete = 0;
        Customer cust = customers.getCustomerAt(cbxCustomers.getSelectedIndex());
        complete += cust.getDeliveriesByStatus(DeliveryStatus.DELIVERED).size();
        complete += cust.getDeliveriesByStatus(DeliveryStatus.UNDELIVERABLE).size();

        incomplete += cust.getDeliveriesByStatus(DeliveryStatus.INTRANSIT).size();
        incomplete += cust.getDeliveriesByStatus(DeliveryStatus.DELIVERYREFUSED).size();
        incomplete += cust.getDeliveriesByStatus(DeliveryStatus.PENDINGCOLLECTION).size();

        txtNoCompleteDeliveries.setText(Integer.toString(complete));
        txtNoIncompleteDeliveries.setText(Integer.toString(incomplete));
    }

    private void setCustomers(CustomerList customers) {
        if (null != this.customers) {
            this.customers.removeObserver(this);
            this.customers = null;
        }
        this.customers = customers;
        if (null != this.customers) {
            this.customers.registerObserver(this);
            this.update();
        }
    }

    private void rebuildComboBox() {
        DefaultComboBoxModel<Customer> model = new DefaultComboBoxModel<>();
        Object selectedItemInOldBox = this.cbxCustomers.getSelectedItem();
        for (int i = 0; i < this.customers.getSize(); i++) {
            model.addElement(this.customers.getCustomerAt(i));
        }
        this.cbxCustomers.setModel(model);
        if (null != selectedItemInOldBox) {
            this.cbxCustomers.setSelectedItem(selectedItemInOldBox);
        } else {
            if (model.getSize() != 0) {
                this.cbxCustomers.setSelectedIndex(0);
            }
        }
        txtUndoRedoConfirm.setText("");
    }

    private void showCustomerDetails() {
        this.custDisplay.setText(null);
        if (null != this.customers) {
            Customer selectedCustomer = this.customers.getCustomerAt(
                    this.cbxCustomers.getSelectedIndex());
            if (null != selectedCustomer) {
                StringBuilder resultBuilder = new StringBuilder();
                resultBuilder.append(selectedCustomer.getFullName());
                resultBuilder.append("\n");
                resultBuilder.append(selectedCustomer.getColAddress().getAddressLine1());
                resultBuilder.append("\n");
                resultBuilder.append(selectedCustomer.getColAddress().getAddressLine2());
                resultBuilder.append("\n");
                resultBuilder.append(selectedCustomer.getColAddress().getCity());
                resultBuilder.append("\n");
                resultBuilder.append(selectedCustomer.getColAddress().getPostcode());
                resultBuilder.append("\n\nDelivery Cost: ");
                resultBuilder.append(selectedCustomer.getDeliveryCost());
                this.custDisplay.setText(resultBuilder.toString());
                calculateNoDeliveries();
                txtUndoRedoConfirm.setText("");
            }
        }
    }

    public void setAllReport() {
        this.allReport = null;
    }

    public void setWIPReport() {
        this.wipReport = null;
    }

    public void setCompleteReport() {
        this.completeReport = null;
    }

    @Override
    public Boolean executeCommand(ICommand objACommand) {
        return this.objCmdTracker.executeCommand(objACommand);
    }

    @Override
    public String undoLastCommand() {
        return this.objCmdTracker.undoLastCommand();
    }

    @Override
    public String redoLastCommand() {
        return this.objCmdTracker.redoLastCommand();
    }

    @Override
    public Boolean isUndoable() {
        return this.objCmdTracker.isUndoable();
    }

    @Override
    public Boolean isRedoable() {
        return this.objCmdTracker.isRedoable();
    }
}
